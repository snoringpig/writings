[
  {
    "objectID": "draft.html",
    "href": "draft.html",
    "title": "Uniform Sampling on a Unit Disk",
    "section": "",
    "text": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# 1. Sample the points\nN = 10000\ninv_cdf = lambda x: np.sqrt(x)\nR = np.vectorize(inv_cdf)(np.random.uniform(0, 1, N))\nT = np.random.uniform(0, 2*np.pi, N)\npoints = [(r * np.cos(t), r * np.sin(t)) for r, t in zip(R, T)]\n\n# 2. Make a scatter plot\nx, y = zip(*points)\nplt.scatter(x, y, s=1)\nplt.xticks([])\nplt.yticks([])\nax = plt.gca()\nax.set_aspect('equal')\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['bottom'].set_visible(False)\nax.spines['left'].set_visible(False)\nplt.show()"
  },
  {
    "objectID": "posts/bicycle_wheel.html",
    "href": "posts/bicycle_wheel.html",
    "title": "A Bicycle Wheel",
    "section": "",
    "text": "Recently, I was introduced the book The Bicycle Wheel, by the owner of a local bike shop. I was pretty intrigued by the spoke design of the wheel, and thus animated the wheel on the front page, using p5.js.\n\n\n\n\n\n\n\nCode\n\n\nfunction setup() {\n  createCanvas(400, 400);\n  \n  x_center = width/2;\n  y_center = height/2;\n  r_outer = width * (0.75/2);\n  r_inner = r_outer / 7.5;\n  width_rim = 12;\n  width_spoke = 2;\n  \n  t = 0;\n  speed = 0.01;\n}\n\nfunction draw() { // loop (by default)\n  translate(x_center, y_center);\n  t = t + speed;\n  rotate(t);\n  \n  // background(220);\n  background(213,181,156); // kraft paper\n  \n  noFill();\n  strokeWeight(width_rim);\n  // rim\n  circle(0, 0, 2 * r_outer); // rim\n  // hub\n  circle(0, 0, 2 * r_inner);\n  fill(0);\n  circle(0, 0, 0.25 * r_inner);\n  noFill();\n  \n  strokeWeight(width_spoke);\n  crossSpokesRealistic(9);\n}\n\nfunction crossSpokesRealistic(n_groups) {\n  let N_I = 2;\n  let N_O = 4;\n  let N_INNER = N_I * n_groups;\n  let N_OUTER = N_O * n_groups;\n  let START1 = 7;\n  let START2 = -2;\n  let outerAngles = Array.from({ length: N_OUTER }, (_, i) =&gt; map(i, 0, N_OUTER, 0, TWO_PI));\n  let innerAngles = Array.from({ length: N_INNER }, (_, i) =&gt; map(i, 0, N_INNER, 0, TWO_PI));\n  let params = [\n    [0, 7],\n    [0, 7 + 1],\n    [3, 1 + 1],\n    [3, 1]\n  ]\n  for (let k = 0; k &lt; params.length; ++k) {\n    let param = params[k];\n    let start_inner = param[0];\n    let start_outer = param[1];\n    for (let i = 0; i &lt; n_groups; ++i) {\n      let theta_inner = innerAngles[(start_inner + i * N_I) % N_INNER];\n      let theta_outer = outerAngles[(start_outer + i * N_O) % N_OUTER];\n      let x_inner = r_inner * cos(theta_inner);\n      let y_inner = r_inner * sin(theta_inner);\n      let x_outer = r_outer * cos(theta_outer);\n      let y_outer = r_outer * sin(theta_outer);\n      line(x_inner, y_inner, x_outer, y_outer);\n    }\n  }\n}\n\nfunction keyPressed() {\n  if (key === 's') {\n    saveGif('wheel', 20);\n  }\n}"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "\\[\n\\int_{M}d\\omega = \\int_{\\partial M}\\omega\n\\]"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "No Man's Land",
    "section": "",
    "text": "Date\n\n\nTitle\n\n\n\n\n\n\nNov 21, 2023\n\n\nA Bicycle Wheel\n\n\n\n\nOct 19, 2023\n\n\nInverse Sampling Transform\n\n\n\n\nSep 22, 2023\n\n\nHow to Break Nested For Loop\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/break_for.html",
    "href": "posts/break_for.html",
    "title": "How to Break Nested For Loop",
    "section": "",
    "text": "Using a few examples, we demonstrate how to conditionally break out of nested for loop using for-else clause."
  },
  {
    "objectID": "posts/break_for.html#single-nested-for-loop",
    "href": "posts/break_for.html#single-nested-for-loop",
    "title": "How to Break Nested For Loop",
    "section": "1 Single Nested for Loop",
    "text": "1 Single Nested for Loop\nIn a for-else clause, else is reached precisely when the for loop is not broken. We give 2 examples to demonstrate this.\n\nfor i in range(3):\n    if i == 4:\n        break\nelse: # reached iff the for loop was broken\n    print(\"Finished for loop layer 1\")\n\nFinished for loop layer 1\n\n\n\nfor i in range(3):\n    if i == 2:\n        break\nelse: # reached iff the for loop was broken\n    print(\"Finished for loop layer 1\")"
  },
  {
    "objectID": "posts/break_for.html#double-nested-for-loop",
    "href": "posts/break_for.html#double-nested-for-loop",
    "title": "How to Break Nested For Loop",
    "section": "2 Double Nested for Loop",
    "text": "2 Double Nested for Loop\nHere, the program halts right after (i,j) reaches (2,1), which is what we want.\n\nfor i in range(4): # Layer 1\n    print(f\"Layer 1 for i = {i}: start\")\n    for j in range(3): # Layer 2\n        print(f\"  {i} {j}\")\n        if (i, j) == (2, 1):\n            break\n    else: # reached &lt;=&gt; for loop layer 2 was broken\n        print(f\"  Layer 2 for i = {i}: finished\")\n        continue # continuing for the enclosing for loop (layer 1), thus ignoring the \"break\"\n    break # reached &lt;=&gt; continue was not called &lt;=&gt; for loop layer 2 was broken\n\nLayer 1 for i = 0: start\n  0 0\n  0 1\n  0 2\n  Layer 2 for i = 0: finished\nLayer 1 for i = 1: start\n  1 0\n  1 1\n  1 2\n  Layer 2 for i = 1: finished\nLayer 1 for i = 2: start\n  2 0\n  2 1\n\n\nHere, no continue in the else part. Thus, the program breaks unconditionally after finishing its job in the i==0 round.\n\nfor i in range(4):\n    print(f\"Layer 1 for i = {i}: start\")\n    for j in range(3):\n        print(f\"  {i} {j}\")\n        if (i, j) == (2, 1):\n            break\n    else: # reached &lt;=&gt; the for loop layer 2 was broken\n        print(f\"  Layer 2 for i = {i}: completed\")\n    break # always reached at i = 0\n\nLayer 1 for i = 0: start\n  0 0\n  0 1\n  0 2\n  Layer 2 for i = 0: completed"
  },
  {
    "objectID": "posts/break_for.html#triple-nested-for-loop",
    "href": "posts/break_for.html#triple-nested-for-loop",
    "title": "How to Break Nested For Loop",
    "section": "3 Triple Nested for Loop",
    "text": "3 Triple Nested for Loop\nOK, we’ve learnt enough. Now, let’s test it on a triple nested for loop!\n\nfor i in range(3):\n    for j in range(4):\n        for k in range(2):\n            print(i, j, k)\n            if (i,j,k) == (1,2,0):\n                break\n        else:\n            continue\n        break\n    else:\n        continue\n    break\n\n0 0 0\n0 0 1\n0 1 0\n0 1 1\n0 2 0\n0 2 1\n0 3 0\n0 3 1\n1 0 0\n1 0 1\n1 1 0\n1 1 1\n1 2 0"
  },
  {
    "objectID": "posts/sampling.html",
    "href": "posts/sampling.html",
    "title": "Inverse Sampling Transform",
    "section": "",
    "text": "Throughout this article, we use the following notations:"
  },
  {
    "objectID": "posts/sampling.html#background",
    "href": "posts/sampling.html#background",
    "title": "Inverse Sampling Transform",
    "section": "1 Background",
    "text": "1 Background\n\nProposition 1 For any random variable X, we have \n    X = F_X^{-1}(U).\n\n\n\nProof. For any x, we have \n    P(X \\le x) = F_X(x) = P(U \\le F_X(x)) = P(F_X^{-1}(U) \\le x).\n Thus X = F_X^{-1}(U)."
  },
  {
    "objectID": "posts/sampling.html#application-uniform-sampling-on-a-disk",
    "href": "posts/sampling.html#application-uniform-sampling-on-a-disk",
    "title": "Inverse Sampling Transform",
    "section": "2 Application: Uniform Sampling on a Disk",
    "text": "2 Application: Uniform Sampling on a Disk\nNow, we want to perform uniform sampling on the unit disk. We use polar coordinates; more specifically, we take r\\cos(\\theta), r\\sin(\\theta), where\n\nr \\in [0,1] such that P(r) \\propto r (\\Rightarrow P(r) = 2r)\n\\theta \\sim U(0,2\\pi)\n\nThe key lies in 1., that is, how to sample r such that P(r) = 2r. Let X be the random variable such that P(X = r) = 2r. Then, F_X(x) = \\int_0^x 2r\\,dr = x^2, and thus F_X^{-1}(y) = \\sqrt{y}.\n\n2.1 Code\nWith above in mind, we sample 10000 points on the unit disk, see Figure 1.\n\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# 1. Sample the points\nN = 10000\ninv_cdf = lambda x: np.sqrt(x)\nR = np.vectorize(inv_cdf)(np.random.uniform(0, 1, N))\nT = np.random.uniform(0, 2*np.pi, N)\npoints = [(r * np.cos(t), r * np.sin(t)) for r, t in zip(R, T)]\n\n# 2. Make a scatter plot\nx, y = zip(*points)\nplt.scatter(x, y, s=1)\nplt.xticks([])\nplt.yticks([])\nax = plt.gca()\nax.set_aspect('equal')\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['bottom'].set_visible(False)\nax.spines['left'].set_visible(False)\nplt.show()\n\n\n\n\n\nFigure 1: Sampling 10000 points uniformly on the unit disk."
  }
]